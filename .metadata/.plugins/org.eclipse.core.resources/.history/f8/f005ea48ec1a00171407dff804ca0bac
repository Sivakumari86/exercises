package com.jpmg.test;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;
// w  ww  .j a v a2s .  co  m
public class Main {
  public static void main(String[] args) {
    Month month = null;
    LocalDate date = null;
    DateTimeFormatter format;
    String out = null;

    month = Month.valueOf("May".toUpperCase());
    date = Year.now().atMonth(month).atDay(12);

    LocalDate nextPayday = date.with(new PaydayAdjuster());

    format = DateTimeFormatter.ofPattern("yyyy MMM d");
    out = date.format(format);
    System.out.printf("Given the date:  %s%n", out);
    out = nextPayday.format(format);
    System.out.printf("the next payday: %s%n", out);
  }
}

class PaydayAdjuster implements TemporalAdjuster {
    
    /**
     * The adjustInto method accepts a Temporal instance
     * and returns an adjusted LocalDate. If the passed in
     * parameter is not a LocalDate, then a DateTimeException is thrown.
     */
    public Temporal adjustInto(Temporal input) {
        LocalDate date = LocalDate.from(input);
        int day;
        if (date.getDayOfMonth() < 15) {
            day = 15;
        } else {
            day = date.with(TemporalAdjusters.lastDayOfMonth()).getDayOfMonth();
        }
        date = date.withDayOfMonth(day);
        if (date.getDayOfWeek() == DayOfWeek.SATURDAY ||
            date.getDayOfWeek() == DayOfWeek.SUNDAY) {
            date = date.with(TemporalAdjusters.previous(DayOfWeek.FRIDAY));
        }

        return input.with(date);
    }
}
