package com.jpmg.test;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjusters;
import java.util.List;
import java.util.Locale;

public class TradeJava8 {

	public static TradingList findDayAndAdjustSettlementOnweekDay(TradingList trading) {
		List<Trade> tempObj = trading.getTrade();
		TradingList tempObjlist = trading;
		//formatte date
		tempObj.stream().forEach(p -> formateDate(p));
		
		tempObj.stream().forEach(p -> System.out.println(p.getTempDate()));
		System.out.println("just checking purpose");
			
		// calculate trading amount
		tempObj.stream().forEach(p -> calculateTradeAmount(p));
		tempObj.stream().forEach(p -> System.out.println(p.getTradingAmount()));
		// check the trading date is on weekend and move the date forward
		tempObj.stream()
				.filter((p) ->  "AED".equalsIgnoreCase(p.getCurrencyCode()))
				.filter((q) -> (q.getTempDate().getDayOfWeek().equals(DayOfWeek.FRIDAY)
						|| q.getTempDate().getDayOfWeek().equals(DayOfWeek.SATURDAY))).
				.forEach(r -> r.setTempDate(r.getTempDate().with(TemporalAdjusters.next(DayOfWeek.MONDAY))));
		tempObj.stream()
				.filter((p) ->  !"SAR".equalsIgnoreCase(p.getCurrencyCode())
						|| !"AED".equalsIgnoreCase(p.getCurrencyCode()))
				.filter((q) -> (q.getTempDate().getDayOfWeek().equals(DayOfWeek.SUNDAY)
						|| q.getTempDate().getDayOfWeek().equals(DayOfWeek.SATURDAY)))
				.forEach(r -> r.setTempDate(r.getTempDate().with(TemporalAdjusters.next(DayOfWeek.MONDAY))));
		
		tempObj.stream().forEach(p -> System.out.println(p.getSettlementDate()+" date adjusted"+p.getTempDate()));
		return null;
	}



	private static Object moveDate(Trade r) {
		
		r.setTempDate(r.getTempDate().with(TemporalAdjusters.next(DayOfWeek.SUNDAY)));
		return r;
	}



	private static Object calculateTradeAmount(Trade p) {
		double tradeamunt = 0;
		tradeamunt = p.getUnitPrice() * p.getFxRate() * p.getNoOfUnits();
		p.setTradingAmount(tradeamunt);
		return p;
		
	}

	private static Object formateDate(Trade p) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd MMM yyyy");
		// Locale specifies human language for translating
		formatter = formatter.withLocale(Locale.UK);
		LocalDate ldate = LocalDate.parse(p.getSettlementDate(), formatter);
		p.setTempDate(ldate);
		return p;
	}

}
